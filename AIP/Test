# AIP TRIMED 
# This File serves to convert the AIP Retetion document into pyton form for data visulization and for GitHub updates 
# Comments such as these will be made either at key points along the code to inform readers or to serve as markers for updates
# print("hello world")

#install the necesary code to convert exel files and push to github
# used pip3 install pandas 
import pandas as pd
# imported matplot for data.
import matplotlib.pyplot as plt
import numpy as np 


# Read the Excel file into a pandas DataFrame
df = pd.read_excel("/Users/Chris/Desktop/Codeing/PER/AIP/Cleaned AIP Retention.xlsx")
# Specify the sheet name or index

# FOR NATIONAL DATA 

# Filter the DataFrame
filtered_data = df[df['year'] > 2001]

# Group by 'year' and aggregate
grouped_data = filtered_data.groupby('year').agg(
    n=('year', 'count'),
    total_grad=('grad_total', 'sum'),
    total_international=('grad_foreign', 'sum'),
    total_first=('grad_first', 'sum'),
    total_mast=('degree_m', 'sum'),
    total_phd=('degree_p', 'sum')
).reset_index()

# Calculate total_domestic and total_degree columns
grouped_data['total_domestic'] = grouped_data['total_grad'] - grouped_data['total_international']
grouped_data['total_degree'] = grouped_data['total_mast'] + grouped_data['total_phd']

# Sort the DataFrame by 'year'
grouped_data = grouped_data.sort_values(by=['year'])

# Calculate 'total_lost' and drop NaN values
grouped_data['total_lost'] = (-grouped_data['total_grad'] + grouped_data['total_first'] -
                             grouped_data['total_degree'] + grouped_data['total_grad'].shift(1))

grouped_data.dropna(inplace=True)

# Filter grouped_data for years greater than 2002
grouped_data = grouped_data[grouped_data['year'] > 2002]

# Calculate total_atrition and total_retention
grouped_data['total_atrition'] = grouped_data['total_lost'] / grouped_data['total_grad'] * 100
grouped_data['total_retention'] = 100 - grouped_data['total_atrition']

print('Total ATRITION %', grouped_data['total_atrition'])
print('Total RETENTION %', grouped_data['total_retention'])

# Determine the range of years in the dataset
min_year = grouped_data['year'].min()
max_year = grouped_data['year'].max()

# Create an array of every year in the range
years = np.arange(min_year, max_year + 1)

# PLOT
plt.plot(grouped_data['year'], grouped_data['total_retention'], marker='o', linestyle='-', label='Retention %')

for i in range(len(grouped_data)):
    plt.text(grouped_data['year'].iloc[i], grouped_data['total_retention'].iloc[i], 
             f"{grouped_data['total_retention'].iloc[i]:.1f}%", 
             ha='center', va='bottom')

plt.xticks(years, fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')
plt.xlabel('Year', fontsize=14, fontweight='bold')
plt.ylabel('Retention %', fontsize=14, fontweight='bold')
plt.title('Retention % by Year for the Nation', fontweight='bold')
plt.grid(True)
plt.show()

# FOR REGIONAL Data

filtered_data = df[df['year'] > 2001] 

# Group by 'obereg' and 'year' and perform aggregation 

filtered_data = df[df['year'] > 2001]
                   
grouped_data = filtered_data.groupby(['obereg', 'year']).agg(
    n=('year', 'count'),
    total_grad=('grad_total', 'sum'),
    total_international=('grad_foreign', 'sum'),
    total_first=('grad_first', 'sum'),
    total_mast=('degree_m', 'sum'),
    total_phd=('degree_p', 'sum')
).reset_index()

# Calculate total_domestic and total_degree columns
grouped_data['total_domestic'] = grouped_data['total_grad'] - grouped_data['total_international']
grouped_data['total_degree'] = grouped_data['total_mast'] + grouped_data['total_phd']

grouped_data = grouped_data.sort_values(by=['obereg', 'year']) 

grouped_data['total_lost'] = (-grouped_data['total_grad'] + grouped_data['total_first'] -  

                             grouped_data['total_degree'] + grouped_data['total_grad'].shift(1))

grouped_data.dropna(inplace=True)

grouped_data = grouped_data[grouped_data['year'] > 2002]

grouped_data['total_atrition'] = grouped_data['total_lost']/grouped_data['total_grad'] * 100 
grouped_data['total_retention'] = 100 - grouped_data['total_atrition']

print('Total ATRITION %', grouped_data['total_atrition'])
print('Total RETENTION %', grouped_data['total_retention'])

# Determine the range of years in the dataset
min_year = grouped_data['year'].min()
max_year = grouped_data['year'].max()

# Create an array of every year in the range
years = np.arange(min_year, max_year + 1)

# print(grouped_data['total_lost'])
filtered_grouped_data = grouped_data[(grouped_data['obereg'] < 9)]

unique_obereg = grouped_data['obereg'].unique()

# Updated labels for regions
obereg_labels = {
    1: 'New England',
    2: 'Mid East',
    3: 'Great Lakes',
    4: 'Plains',
    5: 'Southeast',
    6: 'Southwest',
    7: 'Rocky Mountains',
    8: 'Far West'
}

# Clear previous legend
plt.clf()

# Plot each unique 'obereg' group separately
for obereg, data in filtered_grouped_data.groupby('obereg'):
    label = obereg_labels.get(obereg, obereg)
    plt.plot(data['year'], data['total_retention'], marker='o', linestyle='-', label=label)

# Adjust the legend
plt.xticks(years, fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold') 
plt.xlabel('Year', fontsize=14, fontweight='bold')
plt.ylabel('Retention %', fontsize=14, fontweight='bold')
plt.title('Retention % by Year and Region', fontweight='bold')
plt.grid(True)
plt.legend()
plt.show()


# FOR BASIC

# Group by 'basic' and 'year' and perform aggregation 

grouped_data = filtered_data.groupby(['basic2021', 'year']).agg(
    n=('year', 'count'),
    total_grad=('grad_total', 'sum'),
    total_international=('grad_foreign', 'sum'),
    total_first=('grad_first', 'sum'),
    total_mast=('degree_m', 'sum'),
    total_phd=('degree_p', 'sum')
).reset_index()

# Calculate total_domestic and total_degree columns
grouped_data['total_domestic'] = grouped_data['total_grad'] - grouped_data['total_international']
grouped_data['total_degree'] = grouped_data['total_mast'] + grouped_data['total_phd']

grouped_data['total_lost'] = (-grouped_data['total_grad'] + grouped_data['total_first'] -  

                             grouped_data['total_degree'] + grouped_data['total_grad'].shift(1))

grouped_data.dropna(inplace=True)

grouped_data = grouped_data[grouped_data['year'] > 2002]

total_atrition = grouped_data['total_lost']/grouped_data['total_grad'] * 100 
total_retention = 100 - total_atrition

print('Total ATRITION %', total_atrition)
print('Total RETENTION %', total_retention)

# print(grouped_data) 

import matplotlib.pyplot as plt

# Filter the grouped_data DataFrame
filtered_grouped_data = grouped_data[(grouped_data['basic2021'] <= 20)]

# Filter data for Basic 2021 classifications 15 and 16
basic_15_16_data = filtered_grouped_data[filtered_grouped_data['basic2021'].isin([15, 16])]

# Plot individual lines for Basic 2021 classifications 15 and 16
for basic2021, data in basic_15_16_data.groupby('basic2021'):
    data['total_retention'] = 100 - (data['total_lost'] / data['total_grad'] * 100)
    label = 'Very High Research' if basic2021 == 15 else 'High Research'
    plt.plot(data['year'], data['total_retention'], marker='o', linestyle='-', label=label)


''' OTHER BASIC

# Filter data for other Basic 2021 classifications
other_basic_data = filtered_grouped_data[~filtered_grouped_data['basic2021'].isin([15, 16])]

# Aggregate data for other Basic 2021 classifications
other_basic_data_agg = other_basic_data.groupby('year').mean().reset_index()

# Calculate retention percentage for other Basic 2021 classifications
other_basic_data_agg['total_retention'] = 100 - (other_basic_data_agg['total_lost'] / other_basic_data_agg['total_grad'] * 100)

# Plot a single line for other Basic 2021 classifications
plt.plot(other_basic_data_agg['year'], other_basic_data_agg['total_retention'],marker='o', linestyle='-', label='Other Basic 2021')
'''

plt.xticks(years, fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold') 
plt.xlabel('Year', fontsize=14, fontweight='bold')
plt.ylabel('Retention %', fontsize=14, fontweight='bold')
plt.title('Retention % by Year and Basic 2021 Classification', fontweight='bold')
plt.legend()
plt.grid(True)
plt.show()


# NEW CODE FOR INDIVIDUAL STATES AND FOR UNIVERSITIES

# Group by 'state' and 'year' and perform aggregation 

filtered_data = df[df['year'] > 2001] 


filtered_data = df[df['year'] > 2001]
                   
grouped_data = filtered_data.groupby(['state', 'year']).agg(
    n=('year', 'count'),
    total_grad=('grad_total', 'sum'),
    total_international=('grad_foreign', 'sum'),
    total_first=('grad_first', 'sum'),
    total_mast=('degree_m', 'sum'),
    total_phd=('degree_p', 'sum')
).reset_index()

# Calculate total_domestic and total_degree columns
grouped_data['total_domestic'] = grouped_data['total_grad'] - grouped_data['total_international']
grouped_data['total_degree'] = grouped_data['total_mast'] + grouped_data['total_phd']

grouped_data = grouped_data.sort_values(by=['state', 'year']) 

grouped_data['total_lost'] = (-grouped_data['total_grad'] + grouped_data['total_first'] -  

                             grouped_data['total_degree'] + grouped_data['total_grad'].shift(1))

grouped_data.dropna(inplace=True)

grouped_data = grouped_data[grouped_data['year'] > 2002]

grouped_data['total_atrition'] = grouped_data['total_lost']/grouped_data['total_grad'] * 100 
grouped_data['total_retention'] = 100 - grouped_data['total_atrition']

print('Total ATRITION %', grouped_data['total_atrition'])
print('Total RETENTION %', grouped_data['total_retention'])

# Determine the range of years in the dataset
min_year = grouped_data['year'].min()
max_year = grouped_data['year'].max()

# Create an array of every year in the range
years = np.arange(min_year, max_year + 1)

# print(grouped_data['total_lost'])

unique_state = grouped_data['state'].unique()

# Plot each unique 'state' group separately
# Plotting
for state, data in grouped_data.groupby('state'):
    plt.plot(data['year'], data['total_retention'], marker='o', linestyle='-', label=label)

plt.xticks(years, fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')
plt.xlabel('Year', fontsize=14, fontweight='bold')
plt.ylabel('Retention %', fontsize=14, fontweight='bold')
plt.title('Retention % by Year and State', fontweight='bold')
# plt.legend()
plt.grid(True)
plt.show()


# NOW FOR UNIVERSITY 

filtered_data = df[df['year'] > 2001] 


filtered_data = df[df['year'] > 2001]
                   
grouped_data = filtered_data.groupby(['name', 'year']).agg(
    n=('year', 'count'),
    total_grad=('grad_total', 'sum'),
    total_international=('grad_foreign', 'sum'),
    total_first=('grad_first', 'sum'),
    total_mast=('degree_m', 'sum'),
    total_phd=('degree_p', 'sum')
).reset_index()

# Calculate total_domestic and total_degree columns
grouped_data['total_domestic'] = grouped_data['total_grad'] - grouped_data['total_international']
grouped_data['total_degree'] = grouped_data['total_mast'] + grouped_data['total_phd']

grouped_data = grouped_data.sort_values(by=['name', 'year']) 

grouped_data['total_lost'] = (-grouped_data['total_grad'] + grouped_data['total_first'] -  

                             grouped_data['total_degree'] + grouped_data['total_grad'].shift(1))

grouped_data.dropna(inplace=True)

grouped_data = grouped_data[grouped_data['year'] > 2002]

grouped_data['total_atrition'] = grouped_data['total_lost']/grouped_data['total_grad'] * 100 
grouped_data['total_retention'] = 100 - grouped_data['total_atrition']

print('Total ATRITION %', grouped_data['total_atrition'])
print('Total RETENTION %', grouped_data['total_retention'])

# Determine the range of years in the dataset
min_year = grouped_data['year'].min()
max_year = grouped_data['year'].max()

# Create an array of every year in the range
years = np.arange(min_year, max_year + 1)

# print(grouped_data['total_lost'])

unique_name = grouped_data['name'].unique()

# Plot each unique 'obereg' group separately
# Plotting
for name, data in grouped_data.groupby('name'):
    plt.plot(data['year'], data['total_retention'], marker='o', linestyle='-', label=label)

plt.xticks(years, fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')
plt.xlabel('Year', fontsize=14, fontweight='bold')
plt.ylabel('Retention %', fontsize=14, fontweight='bold')
plt.title('Retention % by Year and University', fontweight='bold')
# plt.legend()
plt.grid(True)
plt.show()















# SEE IF I CAN GET A CLEAN 10 year



#SO now with data frames for obreg regional clasifications and frames for carnagee now need to do histograms for them following the inital set
# LOOK AT ROWS K, L, M, O, P for 'GRAD Total', 'International', 'Domestic','First year','DEGREE Master', 'Degree PHD' 
# So rows 10, 11, 12, 14, 15 





# Calls for the recursion 
# row_1(0)
# rows_2(0)
# rows_5(0)
# rows_10(0)
# rows_20(0)


# CURRENT Issue, How to show a tone of schools, also the odd exceptions that exist 


# 

#CURRENT ISSUE 
#Data has major concerns at the following 
# 7 at 2003
# 9 in general but specificly at 2007-2008
# BASIC 17 2006
# AND in general the graph axis are odd


# OLD ISSUES
    # HISTOGRAMS NOT PRINTING OUT 
        # FIXED BY ADDING MATPLOT
    # Git HUB not working 
        # FIX USE THE FOLLOWING TO PUSH
            # git add /Users/Chris/Desktop/Codeing/PER/AIP
            # git commit -m "stuff"
            # git push origin main
    #Current Issue Histograms produced are not correct 
        #Fixed: using bar and group bar graphs    
    #Current Issue Histograms produced are not correct 
        #Sollution: redo the basic matplot code 
    # Histograms for new data are working but not right 
        # FIXED AND FUNCTIONAL
